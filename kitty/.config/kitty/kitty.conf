# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

font_family      JetBrainsMono Nerd Font Regular 
italic_font      JetBrainsMono Nerd Font Italic
bold_font        JetBrainsMono Nerd Font Bold
bold_italic_font JetBrainsMono Nerd Font Bold Italic
font_size        14.0

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts)

tab_bar_style fade
# tab_bar_style separator

#: The tab bar style, can be one of: fade or separator. In the fade
#: style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator "â”‚"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_stle   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

#: }}}

#: Color scheme {{{

include themes/Gruvbox_Dark.conf

#: }}}

#: Advanced {{{
#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

editor nvim

copy_on_select yes
select_by_word_characters :@-./_~?&=%+#

#: }}}

#: {{{ Scrollback

scrollback_lines 10000

#: }}}


#: OS specific tweaks {{{

sync_to_monitor yes

#: }}}

#: OS specific tweaks {{{

# x11_hide_window_decorations no
macos_thicken_font 0.25
# macos_hide_from_tasks no
# macos_traditional_fullscreen yes
# macos_quit_when_last_window_closed yes
# macos_option_as_alt yes

#: }}}

#: {{{ Window layout {{{

window_padding_width 15.0
remember_window_size   yes
hide_window_decorations no

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter new_window @ some_program

# map cmd+n       new_os_window
# map kitty_mod+n new_os_window
# map kitty_mod+w close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window
# map kitty_mod+0 tenth_window
map kitty_mod+f        toggle_fullscreen
map kitty_mod+m        toggle_maximized
map kitty_mod+n        new_os_window_with_cwd
map kitty_mod+d        new_window_with_cwd
map kitty_mod+shift+w  close_window
map kitty_mod+]        next_window
map kitty_mod+[        previous_window
#: }}}

#: Tab management {{{

map ctrl+tab          next_tab
# map kitty_mod+right   next_tab
# map ctrl+shift+tab    previous_tab
# map kitty_mod+left    previous_tab
# map kitty_mod+t       new_tab
# map kitty_mod+q       close_tab
# map kitty_mod+.       move_tab_forward
# map kitty_mod+,       move_tab_backward
# map kitty_mod+alt+t   set_tab_title
map kitty_mod+t         new_tab_with_cwd
map kitty_mod+shift+]   next_tab
map kitty_mod+shift+[   previous_tab
map kitty_mod+i         set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}
